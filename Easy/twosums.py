# -*- coding: utf-8 -*-
"""TwoSums

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_-t4tWzfQjJd9KIVyHfyL9koiVratMpH
"""

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        import itertools
        store_sum= [tuple()]
        for iter in range(len(nums)):
            first_num = nums[iter]
            index_first= iter
            temp_list= nums[:]
            temp_list.pop(index_first)
            
            for iter2 in range(len(temp_list)):
                second_num = temp_list[iter2]
                if (first_num+second_num == target):
                    if(((first_num,second_num) not in store_sum )and ((second_num,first_num) not in store_sum )):
                        store_sum.append((first_num,second_num))
        
        
        store_sum.pop(0)
        final_list= [[]]
        for iter3 in range(len(store_sum)):
            temp_list= list(store_sum[iter3])
            temp_ind_1 = nums.index(temp_list[0])
            temp_ind_2 = nums.index(temp_list[1])
            ####
            if(temp_list[0]==temp_list[1]):
                index_duplicates = [i for i, x in enumerate(nums) if x == temp_list[0]]
                all_possible_combs= list(itertools.combinations(index_duplicates, 2))
                all_possible_combs=[list(x) for x in all_possible_combs]
                final_list.append(all_possible_combs)
                flag=1
            else:
                final_list.append([temp_ind_1,temp_ind_2])
                flag=0
        
        final_list.pop(0)
        if(flag==1):
            final_list= sum(final_list, [])

        final_list= sum(final_list, [])
        return(final_list)